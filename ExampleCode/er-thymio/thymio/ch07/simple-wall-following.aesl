<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="400" name="THRESHOLD_HIGH"/>
<constant value="100" name="CHANGE"/>
<constant value="1000" name="DETECT"/>
<constant value="200" name="THRESHOLD_LOW"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="61154" name="thymio-II"># Thymio-II program: simple wall following
# Copyright 2016 by Moti Ben-Ari
# CreativeCommons BY-SA 3.0

# Wall following
# Based on line following with one sensor program
#   except that right sensor is used
# START on the tape not on the floor
# When the objects is detected go to it and stop when near

# Left, right buttons set motor power
# Center button to start, stop

# Constants
#  THRESHOLD for sensing the tape
#  CHANGE    percentage change of motors for steering
#  DETECT    for sensing goal

# Variables
var motor          # The base value of the motor power
var motor_change   # The amount to change when approaching and turning

var state # 0 = off, 1 = on, 2 = go to goal

# Initialization
motor = 0
motor_change = (motor * CHANGE)/100
state = 0
call leds.circle(0,0,0,0,0,0,0,0)
call leds.top(0,0,0)

# Set the circle leds to indicate the motor power
sub set_circle_leds
  if motor/100==0 then call leds.circle(0,0,0,0,0,0,0,0) end
  if motor/100==1 then call leds.circle(32,0,0,0,0,0,0,0) end
  if motor/100==2 then call leds.circle(32,32,0,0,0,0,0,0) end
  if motor/100==3 then call leds.circle(32,32,32,0,0,0,0,0) end
  if motor/100==4 then call leds.circle(32,32,32,32,0,0,0,0) end
  if motor/100==5 then call leds.circle(32,32,32,32,32,0,0,0) end

# Left and right button event handlers
#   Increase or decrease motor power within 0-500
onevent button.left
  if  button.left == 0 then
    motor = motor - 100
    if  motor &lt; 0 then motor = 0 end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

onevent button.right
  if  button.right == 0 then
    motor = motor + 100
    if  motor > 500 then motor = 500 end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

# When center button released
onevent button.center
  if  button.center == 0 then
    # If off, set state to 1 (on) and dirve forwards
    if  state == 0 then
      state = 1
      motor.left.target  = motor
      motor.right.target = motor
    #   else if state is on, call stop the motors
    else
      state = 0
      motor.left.target  = 0
      motor.right.target = 0
    end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

# Go to the goal object
sub goto_goal
  # Turn towards the goal
  if prox.horizontal[0] > DETECT or prox.horizontal[1] > DETECT then
  	 motor.left.target  = motor - motor_change
  	 motor.right.target = motor + motor_change
  elseif prox.horizontal[3] > DETECT or prox.horizontal[4] > DETECT then
  	 motor.left.target  = motor + motor_change
  	 motor.right.target = motor - motor_change
  # Stop when near
  elseif prox.horizontal[2] > 4*DETECT then
  	 motor.left.target  = 0
  	 motor.right.target = 0
  	 state = 0
  # Go to the goal
  else
   	 motor.left.target  = motor
  	 motor.right.target = motor
  end

# Proximity event occurs
onevent prox
  # Return in off state
  if  state == 0 then return end
  # If some horizontal sensor detects, go to the goal
  if  state == 2 then callsub goto_goal end
  if prox.horizontal[0] > DETECT or prox.horizontal[1] > DETECT or
     prox.horizontal[2] > DETECT or prox.horizontal[3] > DETECT or
     prox.horizontal[4] > DETECT then
    state = 2
    callsub goto_goal
  # Otherwise, follow line
  else
    if  prox.ground.delta[1] > THRESHOLD_HIGH then
      motor.left.target  = motor + motor_change
      motor.right.target = motor - motor_change
      call leds.top(0, 32, 0)
    elseif prox.ground.delta[1] &lt; THRESHOLD_LOW then
  	  motor.left.target  = motor - motor_change
  	  motor.right.target = motor + motor_change
      call leds.top(0, 0, 32)
    else
  	  motor.left.target  = motor
  	  motor.right.target = motor
      call leds.top(32,0,0)
    end
  end
</node>


</network>
