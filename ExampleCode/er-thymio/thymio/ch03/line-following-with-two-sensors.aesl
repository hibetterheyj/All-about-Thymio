<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="200" name="THRESHOLD"/>
<constant value="25" name="CHANGE"/>
<constant value="100" name="INCREMENT"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="55994" name="thymio-II"># Thymio-II program: line following with two sensors
# Copyright 2013, 2017 by Moti Ben-Ari
# CreativeCommons BY-SA 3.0

# Line following with two sensors
# Left, right buttons set motor power
# Center button to start, stop

# Constants
#  THRESHOLD for sensing the tape
#  DIFF      difference to remember last deviation
#  CHANGE    percentage change of motors for steering

# Variables
var motor          # The base value of the motor power
var motor_change   # The amount to change when approaching and turning

var state # 0 = off, 1 = on

# Initialization
motor = 0
motor_change = (motor * CHANGE)/100
state = 0
call leds.circle(0,0,0,0,0,0,0,0)
call leds.top(0,0,0)

# Set the circle leds to indicate the motor power
sub set_circle_leds
  if motor/100==0 then call leds.circle(0,0,0,0,0,0,0,0) end
  if motor/100==1 then call leds.circle(32,0,0,0,0,0,0,0) end
  if motor/100==2 then call leds.circle(32,32,0,0,0,0,0,0) end
  if motor/100==3 then call leds.circle(32,32,32,0,0,0,0,0) end
  if motor/100==4 then call leds.circle(32,32,32,32,0,0,0,0) end
  if motor/100==5 then call leds.circle(32,32,32,32,32,0,0,0) end

# Left and right button event handlers
#   Increase or decrease motor power within 0-500
onevent button.left
  if  button.left == 0 then
    motor = motor - INCREMENT
    if  motor &lt; 0 then motor = 0 end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

onevent button.right
  if  button.right == 0 then
    motor = motor + INCREMENT
    if  motor > 500 then motor = 500 end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

# When center button released
onevent button.center
  if  button.center == 0 then
    # If off, set state to 1 (on) and dirve forwards
    if  state == 0 then
      state = 1
      motor.left.target  = motor
      motor.right.target = motor
    #   else if state is on, call stop the motors
    else
      state = 0
      motor.left.target  = 0
      motor.right.target = 0
    end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

# Proximity event occurs, turn if necessary
onevent prox
  if  state == 0 then return end
  # If both sensors detect the tape, go straight
  if  prox.ground.delta[0] &lt; THRESHOLD and
      prox.ground.delta[1] &lt; THRESHOLD then
    motor.left.target  = motor
    motor.right.target = motor
    call leds.top(32,0,0)
  # If left detects and right doesn't, turn left
   elseif prox.ground.delta[0] &lt; THRESHOLD and
         prox.ground.delta[1] >= THRESHOLD then
  	 motor.left.target  = motor - motor_change
  	 motor.right.target = motor + motor_change
     call leds.top(0, 0, 32)
  # If right detects and left doesn't, turn right
   elseif prox.ground.delta[0] >= THRESHOLD and
         prox.ground.delta[1] &lt; THRESHOLD then
    motor.left.target  = motor + motor_change
    motor.right.target = motor - motor_change
    call leds.top(0, 32, 0)
  end
</node>


</network>
